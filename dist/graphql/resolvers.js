"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("../firebase/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  Query: {
    getAllFilms: () => {
      let data;

      const getData = async () => {
        await _index.default.ref().child("films").get().then(s => {
          if (s.exists()) {
            data = s.val();
          }
        }).catch(error => {
          console.error(error);
        });
      };

      return getData().then(() => data);
    },
    getAllPersons: () => {
      let data;

      const getData = async () => {
        await _index.default.ref().child("persons").get().then(s => {
          if (s.exists()) {
            data = s.val();
          }
        }).catch(error => {
          console.error(error);
        });
      };

      return getData().then(() => data);
    },
    getProducers: () => {
      let data;

      const getData = async () => {
        await _index.default.ref().child("persons").get().then(s => {
          if (s.exists()) {
            data = s.val();
          }
        }).catch(error => {
          console.error(error);
        });
      };

      return getData().then(() => {
        return data.filter(p => {
          return p.type === "producer";
        });
      });
    },
    getActers: () => {
      let data;

      const getData = async () => {
        await _index.default.ref().child("persons").get().then(s => {
          if (s.exists()) {
            data = s.val();
          }
        }).catch(error => {
          console.error(error);
        });
      };

      return getData().then(() => {
        return data.filter(p => {
          return p.type === "acter";
        });
      });
    },
    getPerson: (_, params) => {
      let data;

      const getData = async () => {
        await _index.default.ref().child(`/persons/${params.id}`).get().then(s => {
          if (s.exists()) {
            data = s.val();
          }
        }).catch(error => {
          console.error(error);
        });
      };

      return getData().then(() => data);
    },
    getFilm: (_, params) => {
      let data;

      const getData = async () => {
        await _index.default.ref().child(`/films/${params.id}`).get().then(s => {
          if (s.exists()) {
            data = s.val();
          }
        }).catch(error => {
          console.error(error);
        });
      };

      return getData().then(() => data);
    },
    getAllTimes: () => {
      let data;

      const getData = async () => {
        await _index.default.ref().child("times").get().then(s => {
          if (s.exists()) {
            data = s.val();
          }
        }).catch(error => {
          console.error(error);
        });
      };

      return getData().then(() => data);
    },
    getTime: (_, params) => {
      let data;

      const getData = async () => {
        await _index.default.ref().child("times").get().then(s => {
          if (s.exists()) {
            data = s.val();
          }
        }).catch(error => {
          console.error(error);
        });
      };

      return getData().then(() => {
        return data.find(({
          id
        }) => {
          return id === params.id;
        });
      });
    }
  }
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,