"use strict";

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require("dotenv").config();

const __URL = process.env.JSONBIN_DB;
module.exports = {
  Query: {
    getAllFilms: () => {
      let data;

      const getData = async () => {
        const res = await (0, _nodeFetch.default)(__URL);
        data = await res.json();
      };

      return getData().then(() => {
        return data.films;
      });
    },
    getAllPersons: () => {
      let data;

      const getData = async () => {
        const res = await (0, _nodeFetch.default)(__URL);
        data = await res.json();
      };

      return getData().then(() => {
        return data.persons;
      });
    },
    getProducers: () => {
      let data;

      const getData = async () => {
        const res = await (0, _nodeFetch.default)(__URL);
        data = await res.json();
      };

      return getData().then(() => {
        return data.persons.filter(p => {
          return p.type === "producer";
        });
      }); //return persons.filter( (p) => { return p.type === "producer" } )
    },
    getActers: () => {
      let data;

      const getData = async () => {
        const res = await (0, _nodeFetch.default)(__URL);
        data = await res.json();
      };

      return getData().then(() => {
        return data.persons.filter(p => {
          return p.type === "acter";
        });
      });
    },
    getPerson: (_, params) => {
      let data;

      const getData = async () => {
        const res = await (0, _nodeFetch.default)(__URL);
        data = await res.json();
      };

      return getData().then(() => {
        return data.persons.find(({
          id
        }) => {
          return id === params.id;
        });
      });
    },
    getFilm: (_, params) => {
      let data;

      const getData = async () => {
        const res = await (0, _nodeFetch.default)(__URL);
        data = await res.json();
      };

      return getData().then(() => {
        return data.films.find(({
          id
        }) => {
          return id === params.id;
        });
      });
    },
    getAllTimes: () => {
      let data;

      const getData = async () => {
        const res = await (0, _nodeFetch.default)(__URL);
        data = await res.json();
      };

      return getData().then(() => {
        return data.times;
      });
    },
    getTime: (_, params) => {
      let data;

      const getData = async () => {
        const res = await (0, _nodeFetch.default)(__URL);
        data = await res.json();
      };

      return getData().then(() => {
        return data.times.find(({
          id
        }) => {
          return id === params.id;
        });
      });
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,